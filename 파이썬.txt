문자열 메소드	cf) /' /" ->' " 문자 표현
s.len() 	-> 문자열 개수 반환
s.upper() 	-> 대문자로 변환
s.lower() 	-> 소문자로 변환
s.title() 	-> 각 단어의 앞글자만 대문자 변환
s.capitalize() -> 첫 문자를 대문자로 변환
s.count('a')  -> 'a'의 개수 반환
s.find('a') 	-> 'a'가 왼쪽부터 몇 번째있는지 반환
s.rfind('a')	-> 'a'가 오른쪽부터 몇 번째있는지 반환
s.startswith('a') -> 'a'로 시작하는지 여부 반환
s.endswith('a') -> 'a'로 끝나는지 여부 반환
s.strip()	-> 좌우 공백 삭제 (lstrip,rstrip -> 좌,우)
s.split('\n')  -> \n을 기준으로 나누어 리스트로 반환
s.isdigit() -> 문자열의 숫자 여부 반환
s.islower() -> 문자열의 소문자 여부 반환
s.isupper() -> 문자열의 대문자 여부 반환

서식 지정
1. %서식 -> %자료형 %(값)
-> print("%d %d %d" %(1,2,3)   print("%s %s %s" %('a','b','c')

2. format() 함수 -> '{자료형}'.format(인수)
-> print("{0},{1:.2f}".format(10,10.555)

자료구조 종류별 메소드
1. 리스트 []
>> a.append(value)
>> a.insert(index,value)
>> a.clear()
>> del a[index]
>> a.remove(value)
>> a.pop(index)
>> len(a)
>> a.count(value)
>> b = a.copy()
>> a.extend(b) -> a에 b값 추가
>> a.index(index)
>> a.sort() or a.sort(reverse=True)
>> a.reverse()
>> a.replace(a,b) -> a를 b로 교체

2. 튜플 (값 변경 x) ()
3. 세트 (값 중복 x) {}
>> set.union() intersection() difference() 
>> a.add(x)
>> a.remove(x) or a.discard
>> a.pop
>> a.clear()
>> len(a)

4. 딕셔너리
>> a.['a'] = 1 (딕셔너리 추가)
>> a.keys()
>> a.values()
>> a.items()

Collections 모듈
1. deque()
- 원형 연결리스트 형태로 데이터를 저장하는 형태
- 추가 메소드: append() -> 뒤에 추가 , appendleft() -> 앞에 추가, insert(),
- 확장 메소드: extend() -> 한 문자씩 추가 , extendleft()
- 이동 메소드: rotate(n) -> n만큼 오른쪽으로 이동
- 삭제 메소드: pop(), popleft(), remove()

2. OrderedDict()
- 순서가 있는 딕셔너리
- 정렬 메소드: sorted(d.items(), key=sort_by_key)

3. defaultdict()
- 변수를 생성할 때 기본 값을 지정할 수 있는 딕셔너리
- d = defaultdict( 기본값 ) 으로 선언

4. counter()
- 시퀀스 자료형의 데이터 값의 개수를 딕셔너리 형태로 반환

5. namedtuple()
- 튜플 형태로 데이터 구조체를 만드는 방식 (C언어의 struct와 유사)
ex) Point = namedtuple('Point', ['x','y'])
    p = Point(11,22)
